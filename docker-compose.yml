version: '3.8' # Use a recent version of Docker Compose file format

services:
  # Streamlit Web App Service
  streamlit:
    build:
      context: . # Build from the current directory (where Dockerfile is)
      dockerfile: Dockerfile
    container_name: social_media_assistant_streamlit
    ports:
      - "8501:8501" # Expose Streamlit app on host port 8501
    volumes:
      - .:/app # Mount your local project directory into the container for live updates (useful for dev)
      - uploads:/app/uploads # Persist uploads
      - logs:/app/logs     # Persist logs
      # Add this line for SQLite data persistence if your DB is here
      # - sqlite_data:/app/data/db # Example, adjust path if your DB is elsewhere
    environment: # <--- CHANGED from env_file to environment
      - REDIS_URL=redis://redis:6379/0 # Internal Redis URL for inter-container communication
      # === Pass your API keys and secrets directly from Jenkins/shell ===
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - INSTAGRAM_ACCESS_TOKEN=${INSTAGRAM_ACCESS_TOKEN}
      - INSTAGRAM_BUSINESS_ACCOUNT_ID=${INSTAGRAM_BUSINESS_ACCOUNT_ID}
      - FACEBOOK_PAGE_ID=${FACEBOOK_PAGE_ID}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      # Add any other variables your Streamlit app needs
    depends_on:
      - redis # Ensure Redis starts before Streamlit
    restart: unless-stopped # Always restart unless explicitly stopped

  # Celery Worker Service
  celery_worker:
    build:
      context: . # Build from the current directory (uses the same Dockerfile)
      dockerfile: Dockerfile
    container_name: social_media_assistant_celery_worker
    command: celery -A celery_app worker --loglevel=info # Command to start the Celery worker
    volumes:
      - .:/app # Mount local project directory
      - uploads:/app/uploads # Share uploads volume with streamlit
      - logs:/app/logs     # Share logs volume with streamlit
    environment: # <--- CHANGED from env_file to environment
      - REDIS_URL=redis://redis:6379/0
      # === Pass your API keys and secrets directly from Jenkins/shell ===
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - INSTAGRAM_ACCESS_TOKEN=${INSTAGRAM_ACCESS_TOKEN} # Add if worker needs to post
      - INSTAGRAM_BUSINESS_ACCOUNT_ID=${INSTAGRAM_BUSINESS_ACCOUNT_ID} # Add if worker needs it
      - FACEBOOK_PAGE_ID=${FACEBOOK_PAGE_ID} # Add if worker needs it
      # Add any other variables your Celery worker needs
    depends_on:
      - redis # Ensure Redis starts before the worker
    restart: unless-stopped

  # Celery Beat Service (Scheduler)
  celery_beat:
    build:
      context: . # Build from the current directory (uses the same Dockerfile)
      dockerfile: Dockerfile
    container_name: social_media_assistant_celery_beat
    command: celery -A celery_app beat --loglevel=info --schedule=/app/celerybeat-schedule # Command to start Celery Beat
    volumes:
      - .:/app # Mount local project directory
      - uploads:/app/uploads # Share uploads volume
      - logs:/app/logs     # Share logs volume
      - beat_data:/app/celerybeat-schedule # Persist Celery Beat schedule state
    environment: # <--- CHANGED from env_file to environment
      - REDIS_URL=redis://redis:6379/0
      # Add any API keys or secrets Celery Beat might directly need (less common)
    depends_on:
      - redis # Ensure Redis starts before Celery Beat
    restart: unless-stopped

  # Redis Service (Message Broker and Backend)
  redis:
    image: "redis:7-alpine" # Use a lightweight official Redis image
    container_name: social_media_assistant_redis
    ports:
      - "6379:6379" # Expose Redis on host port 6379
    volumes:
      - redis_data:/data # Persist Redis data
    restart: unless-stopped

# Define named volumes for persistence
volumes:
  uploads:
  logs:
  redis_data:
  beat_data:
  # sqlite_data: # Define this if you add the SQLite volume